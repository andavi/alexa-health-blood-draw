var assert = require('assert');
var ordinal = require('../').english;

describe('english', function() {
  it('appends "st" with numbers ending in 1', function() {
    assert.strictEqual(ordinal(1), '1st');
    assert.strictEqual(ordinal(21), '21st');
  });

  it('appends "nd" with numbers ending in 2', function() {
    assert.strictEqual(ordinal(2), '2nd');
    assert.strictEqual(ordinal(22), '22nd');
  });

  it('appends "rd" with numbers ending in 3', function() {
    assert.strictEqual(ordinal(3), '3rd');
    assert.strictEqual(ordinal(23), '23rd');
  });

  it('appends "th" with all other numbers', function() {
    assert.strictEqual(ordinal(0), '0th');
    assert.strictEqual(ordinal(20), '20th');
    assert.strictEqual(ordinal(24), '24th');
    assert.strictEqual(ordinal(25), '25th');
    assert.strictEqual(ordinal(26), '26th');
    assert.strictEqual(ordinal(27), '27th');
    assert.strictEqual(ordinal(28), '28th');
    assert.strictEqual(ordinal(29), '29th');
  });

  it('appends "th" with numbers in the teens', function() {
    assert.strictEqual(ordinal(11), '11th');
    assert.strictEqual(ordinal(12), '12th');
    assert.strictEqual(ordinal(13), '13th');
    assert.strictEqual(ordinal(14), '14th');
    assert.strictEqual(ordinal(15), '15th');
    assert.strictEqual(ordinal(16), '16th');
    assert.strictEqual(ordinal(17), '17th');
    assert.strictEqual(ordinal(18), '18th');
    assert.strictEqual(ordinal(19), '19th');
  });

  it('appends "th" when the tens digit of a number is 1', function() {
    assert.strictEqual(ordinal(911), '911th');
    assert.strictEqual(ordinal(812), '812th');
    assert.strictEqual(ordinal(713), '713th');
    assert.strictEqual(ordinal(614), '614th');
    assert.strictEqual(ordinal(515), '515th');
    assert.strictEqual(ordinal(416), '416th');
    assert.strictEqual(ordinal(317), '317th');
    assert.strictEqual(ordinal(218), '218th');
    assert.strictEqual(ordinal(119), '119th');
  });

  it('appends indicator with numeric string', function() {
    assert.strictEqual(ordinal('1234'), '1234th');
  });

  it('does not tolerate non-numeric values', function() {
    assert.throws(function() {
      ordinal('hi');
    }, Error);
  });

  it('does not tolerate "" as 0', function() {
    assert.throws(function() {
      ordinal('');
    }, Error);
  });

  it('does not tolerate object literals', function() {
    assert.throws(function() {
      ordinal({});
    });
  });

  it('does not tolerate arrays', function() {
    assert.throws(function() {
      assert(ordinal([]));
    });
  });
});

describe('indicator', function() {
  var indicator = ordinal.indicator;

  it('returns the correct indicator for a number', function() {
    assert.strictEqual(indicator(1), 'st');
    assert.strictEqual(indicator(2), 'nd');
    assert.strictEqual(indicator(3), 'rd');
    assert.strictEqual(indicator(4), 'th');
    assert.strictEqual(indicator(11), 'th');
    assert.strictEqual(indicator(12), 'th');
    assert.strictEqual(indicator(13), 'th');
  });

  it('does not tolerate non numeric values', function() {
    assert.throws(function() {
      indicator('hi');
    });
  });
});
